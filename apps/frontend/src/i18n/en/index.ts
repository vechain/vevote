import type { BaseTranslation } from "../i18n-types.js";

const en = {
  left: "Left",
  by: "by",
  not_published: "Not published",
  homepage: "Homepage",
  back: "Back",
  start: "Start",
  end: "End",
  edit: "Edit",
  on: "On",
  all: "All",
  finished: "Finished",
  executed: "Executed",
  show_more: "Show more",
  exit: "Exit",
  next: "Next",
  learn_more: "Learn more",
  see_details: "See details",
  select: "Select",
  select_between: "Select between",
  and: "and",
  one: "one",
  voting: "Voting",
  voters: "Voters",
  most_voted: "Most voted",
  votes: "Votes",
  delete: "Delete",
  cancel: "Cancel",
  percentage: "%",
  submit: "Submit",
  submit_vote: "Submit Vote",
  voting_power: "Voting power",
  your_voting_power: "Your voting power",
  voted: "Voted",
  vote: "Vote",
  wallet: "Wallet",
  block: "Block #",
  node: "Node",
  go_back: "Go back",
  optional: "Optional",
  buy_a_node: "Buy a Node",
  filed_length: "{current:number}/{max:number}",
  upload: "Upload",
  copied_to_clipboard: "Copied to clipboard",
  file_upload_description:
    "Image size should be 1280x512px (ratio 3:1).\nJPG, PNG or SVG of maximum of {size:number}MB.",
  select_date: "Select date",
  select_time: "Select time",
  maximum: "Maximum",
  minimum: "Minimum",
  number_option: "Option {index:number}",
  continue: "Continue",
  results: "Results",
  description: "Description",
  preview: "Preview",
  close: "Close",
  confirm: "Confirm",
  try_again: "Try Again",
  read_full_description: "Read full description",
  disconnect: "Disconnect",
  connect_wallet: "Connect Wallet",
  connect_wallet_to_vote: "Connect your wallet to vote",
  comment: "Comment",
  comment_placeholder: "Add a comment to your vote...",
  migrate: "Migrate",
  stargate: "StarGate",
  learn_how_voting_power: "How voting power is obtained",
  discuss_on_discourse: "Join the discussion on Discourse",
  common: {
    time: {
      seconds: "{count:number} {count|{1: second, *: seconds}}",
      minutes: "{count:number} {count|{1: minute, *: minutes}}",
      hours: "{count:number} {count|{1: hour, *: hours}}",
      days: "{count:number} {count|{1: day, *: days}}",
    },
  },
  datepicker: {
    select_date: "Select date",
    previous_month: "Previous month",
    next_month: "Next month",
    today: "Today",
    weekdays: {
      mon: "Mon",
      tue: "Tue",
      wed: "Wed",
      thu: "Thu",
      fri: "Fri",
      sat: "Sat",
      sun: "Sun",
    },
    months: {
      january: "January",
      february: "February",
      march: "March",
      april: "April",
      may: "May",
      june: "June",
      july: "July",
      august: "August",
      september: "September",
      october: "October",
      november: "November",
      december: "December",
    },
  },
  timepicker: {
    select_time: "Select time",
    select_time_24h: "Select time (UTC)",
    hours: "Hours",
    minutes: "Minutes",
    utc_notice: "All times are in UTC",
  },
  home: {
    title: "Home",
    go_to_proposals: "Go to proposals",
  },
  node_names: {
    none: "not defined",
    strength: "Strength",
    thunder: "Thunder",
    mjolnir: "Mjolnir",
    vethorx: "VeThor X",
    strengthx: "Strength X",
    thunderx: "Thunder X",
    mjolnirx: "Mjolnir X",
    flash: "Flash",
    lightning: "Lightning",
    dawn: "Dawn",
    validator: "Validator",
    inactive_validator: "Validator (inactive)",
  },
  field_errors: {
    required: "Required",
    invalid_format: "Invalid format",
    invalid_address: "Please enter a valid address",
    end_before_start: "The end date must be after the start date",
    end_before_today: "The end date must be in the future",
    start_after_today: "The start date must be in the future",
    end_after_max_duration: "The end date must be within {days:string} days of the start date",
    failed_load_voters: "No voters found matching your search criteria.",
    descriptions_errors: {
      placeholders_not_replaced:
        "Please replace placeholder text with your own content before submitting the proposal.",
      empty_description: "Description cannot be empty. Please provide content for your proposal.",
    },
    discourse_topic_not_exist: "The Discourse topic does not exist or is not accessible",
  },
  voting_list: {
    voting_options: "Voting options:",
    option_to_vote: "Select an option to vote:",
    voting_has_not_started_yet: "Voting has not started yet",
    please_connect_your_wallet: "Please connect your wallet",
    you_have_already_voted: "You have already voted",
    you_dont_have_enough_voting_power: "You don't have enough voting power",
  },
  proposal: {
    title: "Proposal",
    proposed_by: "Proposed by",
    voting_calendar: "Voting calendar",
    confirm_in_your_wallet: "Confirm in your wallet...",
    who_can_vote: "Who can vote",
    vechain_foundation: "VeChain Foundation",
    node_holders: "Node holders with voting power will be able to vote on this proposal.",
    voting_will_start: "Voting will start {date:string}",
    see_your_vote: "See your vote details",
    see_all_voters: "See all ({voters:number}) voters",
    see_first_voter: "See first voter",
    mark_as_executed: "Mark as executed",
    buy_another_node: "Buy another node to increase your voting power on future proposals.",
    buy_a_node:
      "Voting is only possible for Node holders. Buy a node to vote on future proposals or increase your voting power.",
    vote_success: {
      title: "Vote submitted!",
      description: "Your vote was submitted successfully.",
    },
    cancel_proposal: {
      title: "Cancel proposal",
      description:
        "Canceling the proposal means it the voting will not take place and the proposal will not have no results.",
      reason: "Reason",
      reason_placeholder: "Write the reason for cancellation...",
      success_title: "Proposal canceled successfully",
      success_description: "The proposal has been canceled successfully. Voting will not take place.",
    },
    execute_proposal: {
      title: "Mark as Executed",
      description:
        "If the actions of the proposal have already been executed, you can mark this approved proposal as executed for the voters to know.",
      label: "Execution / Transaction details",
      link_placeholder: "Insert link with the proof of the execution",
    },
    delete_proposal: {
      title: "Delete proposal",
      description:
        "If you delete this draft, all the information of the proposal will not be possible to recover anymore.",
      confirmation: "Are you sure you want to delete it?",
      no_go_back: "No, go back",
      yes_delete: "Yes, Delete",
    },
    info_box: {
      info: {
        title: "Minimum participation",
        description:
          "A minimum of {quorum:number}% participation must be reached to validate the voting of the proposal and get approval.",
      },
      approved: {
        title: "Minimum participation reached",
        description: "The voting participation reached the minimum required of {quorum:number}% to get approval.",
      },
      executed: {
        title: "Proposal Approved and Executed",
        description: "The voting approved the proposal and the actions have been executed.",
      },
      "min-not-reached": {
        title: "Minimum participation not reached",
        description:
          "The voting participation didn’t reached the minimum required of {quorum:number}% to get approval.",
      },
      rejected: {
        title: "Proposal Rejected",
        description: "The proposal didn’t get enough votes in favor to get approval.",
      },
      canceled: {
        title: "Proposal Canceled",
        description: "The proposal was canceled by VeChain or the proposer by the following reason:",
      },
    },
    voting_power: {
      get_more_voting_power: "Get more voting power",
      get_voting_power: "Get voting power",
      title: "Voting power",
      calculation: "Your voting power was calculated at the time of the snapshot {snapshot:string}.",
      total_voting_power: "Total voting power",
      warnings: {
        zero_voting_power: "The connected wallet has no voting power",
        legacy_node: "You have legacy nodes that haven’t been migrated yet.  Migrate to get more voting power.",
        delegated: {
          title: "Your voting power is delegated",
          description: "Your voting power is delegated to another node",
        },
      },
    },
    voters_table: {
      filters: {
        search_by_address: "Search by address...",
        voting_options: "Voting options",
        node: "Node",
        sort_by: "Sort by",
      },
      header: {
        date: "Date",
        address: "Address",
        node: "Node",
        node_id: "Node ID",
        voting_power: "Power",
        voted_option: "Option",
        transaction_id: "Transaction ID",
      },
    },
    create: {
      previewing: "Previewing proposal",
      title: "Create Proposal",
      steps: "{current:number} of {total:number}",
      voting_details_desc: "Add the main details and setup the calendar",
      voting_setup_desc: "Define the voting setup details",
      voting_summary_desc: "Review all the details before publishing",
      add_new_option: "Add new option",
      exit_proposal: {
        title: "Exit proposal creation",
        description:
          "By exiting you lose all the information written or you can save this proposal as a draft and finish later?",
        description_last_step:
          "You will lose all entered information if you exit now. Saving as a draft is only available on the final step of the form.",
        description_draft_exist:
          "Be aware that a draft proposal already exists. Saving now will overwrite your previous draft.",
        exit_button: "Exit proposal",
        save_button: "Save draft",
      },
      draft_saved: {
        title: "Draft saved!",
        description: "The proposal draft has been saved successfully and can now be continued later.",
      },
      details_form: {
        title: "Title",
        title_placeholder: "What's the proposal title?",
        description: "Description",
        description_placeholder: "Add a description...",
        header_image: "Header image",
        discourse_url: "Discourse url",
        discourse_topic: "Discourse Topic",
        discourse_topic_placeholder: "your-topic-name",
        discourse_topic_help: "Enter the topic name from your VeChain Discourse discussion",
        voting_calendar: "Voting calendar",
      },
      setup_form: {
        voting_type: "Voting type",
        voting_type_subtitle: "Select the type",
        voting_question: "Voting Question",
        voting_question_subtitle: "This question should provide exact context to the voting options:",
        voting_question_placeholder: "Write the question...",
        voting_limit: "Voting limit",
        voting_limit_subtitle: "Define the minimum and maximum amount of options allowed per voter:",
        voting_options: "Voting options",
        voting_choice_subtitle: "The “single choice” voting type only allows the voter to select:",
        voting_options_subtitle: "Add between 2 and 30 options to vote:",
        add_new_option: "Add new option",
        voting_option_placeholder: "Write the voting option...",
      },
      summary_form: {
        main_details: {
          title: "Main details",
          calendar: "Calendar",
        },
        voting_setup: {
          title: "Voting setup",
          question: "Question",
          type: "Type",
          limit: "Minimum {min:number} options - Maximum {limit:number} options",
          types: {
            SINGLE_CHOICE: "Single choice - For / Against / Abstain",
          },
        },
        publish_proposal: "Publish Proposal",
        publish_description: "Please note that once the campaign is published, it can't be edited anymore.",
        publish_sub_description: "Are you sure you want to publish this proposal?",
        publish_failed: "Publishing failed",
        publish_failed_description: "The publishing of the proposal couldn’t be completed. Please try again.",
        publish_success: "Proposal published",
        publish_success_description: "The proposal has been successfully publish and can now be seen publicly.",
      },
    },
    go_to_stargate: "Go to StarGate",
    proposal_not_found: "Proposal not found",
    proposal_not_found_description:
      "The proposal you're looking for doesn't exist or may have been removed. It's possible the URL is incorrect or the proposal has been deleted.",
    back_to_proposals: "Back to Proposals",
    try_again: "Try Again",
    starts_in: "Starts in",
    ends_in: "Ends in",
    timeline: "Timeline",
    timeline_created: "Created",
    proposal_canceled: "Proposal Canceled",
    proposal_canceled_description: "The proposal was canceled by VeChain or the proposer by the following reason:",
    no_reason_provided: "No reason provided",
    unknown_error: "Unknown error",
    failed_to_execute_proposal: "Failed to execute proposal",
    proposal_approved_and_executed: "Proposal Approved and Executed",
    proposal_approved: "The voting participation reached the minimum quorum to get approval.",
    the_voting_approved_the_proposal_and_the_actions_have_been_executed:
      "The voting approved the proposal and the actions have been executed.",
    see_details: "See details",
    proposal_rejected: "Proposal Rejected",
    the_proposal_didnt_get_enough_votes_in_favor_to_get_approval:
      "The proposal didn't get enough votes in favor to get approval.",
    minimum_quorum_not_reached: "Minimum participant not met",
    quorum_not_reached: "Quorum of {quorum:string} voting power not reached.",
    quorum_not_reached_yet: "Quorum of {quorum:string} voting power not reached yet.",
    quorum_reached: "Quorum reached.",
    vote_submission_failed: "Vote submission failed",
    vote_submitted_successfully: "Vote submitted successfully!",
    submit_your_vote: "Submit your vote",
    vote_cannot_be_changed: "Your vote cannot be changed once submitted.",
    waiting_wallet_confirmation: "Waiting wallet confirmation...",
    confirm_vote: "Confirm vote",
    you_voted: "You voted",
  },
  proposals: {
    title: "Proposals",
    create: "Create Proposal",
    search_placeholder: "Search proposals...",
    no_proposals: "No proposals found",
    pagination: "{current:number} of {total:number} proposals",
  },
  statuses: {
    voted: "Voted",
  },
  badge: {
    draft: "Draft",
    upcoming: "Upcoming",
    voting: "Voting now",
    approved: "Approved",
    executed: "Executed",
    canceled: "Canceled",
    rejected: "Rejected",
    "min-not-reached": "Quorum not reached",
  },
  filters: {
    title: "Filters",
    apply: "Apply",
    reset: "Reset",
    select_all: "Select all",
    deselect_all: "Deselect all",
    sort: {
      newest: "Newest",
      oldest: "Oldest",
      most_participant: "Most participant",
      least_participant: "Least participant",
    },
  },
  header: {
    title: "VeChainThor Voting Platform",
    description: "Vote to shape the future of VeChainThor",
    how_to_vote: "How to vote",
    how_to_get_voting_power: "Get voting power",
  },
  stargate_warning: {
    title: "StarGate Node Migration Required",
    description: "You have 1 or more non-migrated nodes. Please migrate them as soon as possible to continue voting.",
    migration_link: "https://app.stargate.vechain.org/",
    ongoing_proposal_warning:
      "If a proposal has already started, you will not be able to vote on it even after migration. Only future proposals will be available for voting.",
    confirmation_instruction: "If you want to continue anyway, write this text: agree-with-this",
    confirmation_error: "Please type exactly 'agree-with-this' to continue",
  },
  footer: {
    version: "v1.0.0",
    all_right: "All Rights Reserved © Vechain Foundation San Marino S.r.l.",
    legal: {
      title: "Legal",
      terms_of_service: "Terms of Service",
      privacy_policy: "Privacy Policy",
      cookies_policy: "Cookies Policy",
    },
    resources: {
      title: "Resources",
      docs: "Docs",
      stargate: "StarGate",
      support: "Support",
    },
  },
  admin: {
    title: "Admin Dashboard",
    tabs: {
      contracts: "Contracts",
      utils: "Utils",
      users: "Users",
      governance_settings: "Governance Settings",
      voting_power_timepoint: "Voting Power Query",
    },
    contracts: {
      vevote: "VeVote",
      node_management: "Node Management",
      stargate_nodes: "Stargate Nodes",
    },
    vevote_contract: {
      contract_address: "Contract Address:",
      title: "VeVote Contract Information",
      loading: "Loading VeVote Contract Information...",
      error: "Error loading VeVote contract data: {error:string}",
      no_data: "No VeVote contract data available",
      contract_version: "Contract Version",
      quorum_numerator: "Quorum Numerator",
      quorum_denominator: "Quorum Denominator",
      min_voting_delay: "Min Voting Delay",
      min_voting_duration: "Min Voting Duration",
      max_voting_duration: "Max Voting Duration",
      min_staked_amount: "Min Staked Amount",
      quorum_percentage: "{percentage:number}% required",
      contract_info_title: "Contract Information",
    },
    node_management: {
      title: "Node Management Contract Information",
      help_text: "Enter a wallet address to view detailed node ownership and delegation information for that account.",
      user_address_label: "User Address",
      user_address_placeholder: "Enter user address (0x...)",
      load_button: "Load User Node Info",
      loading_button: "Loading...",
      loading_text: "Loading user node information...",
      node_info_title: "Node Information for {address:string}",
      is_node_holder: "Is Node Holder",
      is_node_delegator: "Is Node Delegator",
      owned_nodes: "Owned Nodes",
      managed_nodes: "Managed Nodes",
      ids_label: "IDs: {ids:string}",
      yes: "Yes",
      no: "No",
      error: "Error loading node data: {error:string}",
      card_title: "Node Information",
      results_for: "Results for {address:string}",
      no_results: "No node information available for this address",
      methods_title: "Available Methods",
      methods_description:
        "This component demonstrates the NodeManagementService functionality. You can extend it to show additional statistics like total nodes, delegation stats, etc.",
    },
    stargate_nodes: {
      title: "Stargate NFT Contract Information",
      loading: "Loading Stargate NFT Information...",
      error: "Error loading Stargate NFT data: {error:string}",
      no_data: "No Stargate NFT data available",
      total_supply: "Total Supply",
      available_levels: "Available Levels",
      level_ids: "Level IDs: {ids:string}",
      level_details_title: "Level Details",
      table: {
        level: "Level",
        name: "Name",
        is_x_node: "Is X-Node",
        maturity_blocks: "Maturity Blocks",
        vet_required: "VET Required",
        circulating: "Circulating",
        cap: "Cap",
      },
      yes: "Yes",
      no: "No",
      not_available: "N/A",
      contract_info_title: "Contract Information",
      contract_description:
        "This displays comprehensive information about the Stargate NFT contract including level configurations, supply information, and staking requirements.",
    },
    format_seconds: "{number:number}s",
    format_minutes_seconds: "{minutes:number} min ({seconds:number}s)",
    format_days: "{number:number} days",
    vet_format: "{amount:string} VET",
    governance_settings: {
      title: "Governance Settings",
      description: "Configure VeVote governance parameters",
      quorum_numerator_label: "Quorum Numerator",
      quorum_numerator_help: "Required votes numerator (current: {current:number})",
      min_voting_delay_label: "Min Voting Delay",
      min_voting_delay_help: "Minimum delay before voting starts (in blocks)",
      min_voting_duration_label: "Min Voting Duration",
      min_voting_duration_help: "Minimum voting duration (in blocks)",
      max_voting_duration_label: "Max Voting Duration",
      max_voting_duration_help: "Maximum voting duration (in blocks)",
      min_staked_vet_amount_label: "Min Staked VET Amount",
      min_staked_vet_amount_help: "Minimum VET amount required to stake",
      level_multipliers_label: "Level ID Multipliers",
      level_multipliers_help: "Voting weight multipliers for each level ID (scaled by 100)",
      validator_multiplier: "Validator (Level 0)",
      strength_node_multiplier: "Strength Node (Level 1)",
      thunder_node_multiplier: "Thunder Node (Level 2)",
      mjolnir_node_multiplier: "Mjolnir Node (Level 3)",
      vethor_x_node_multiplier: "VeThor X Node (Level 4)",
      strength_x_node_multiplier: "Strength X Node (Level 5)",
      thunder_x_node_multiplier: "Thunder X Node (Level 6)",
      mjolnir_x_node_multiplier: "Mjolnir X Node (Level 7)",
      dawn_node_multiplier: "Dawn Node (Level 8)",
      lightning_node_multiplier: "Lightning Node (Level 9)",
      flash_node_multiplier: "Flash Node (Level 10)",
      level_id: "Level ID",
      node_type: "Node Type",
      current_multiplier: "Current",
      new_multiplier: "New Value",
      update_settings: "Update Settings",
      update_governance_settings: "Update Governance Settings",
      update_multipliers: "Update Multipliers",
      updating: "Updating...",
      success_title: "Settings Updated Successfully",
      success_description: "Governance settings have been updated and are now active.",
      error_title: "Failed to Update Settings",
      error_description: "There was an error updating the governance settings: {error:string}",
      invalid_range: "Value must be between {min:number} and {max:number}",
      required_field: "This field is required",
      current_value: "Current: {value:string}",
    },
    user_management: {
      title: "User Management",
      description: "Grant or revoke roles for VeVote governance",
      user_address_label: "User Address",
      user_address_placeholder: "Enter user address (0x...)",
      role_label: "Role",
      role_placeholder: "Select a role",
      current_roles_label: "Current Roles:",
      checking_roles: "Checking roles...",
      no_roles_assigned: "No roles assigned",
    },
    role_users: {
      title: "Role Users",
      help_text: "Select a role to view all users who have been granted that specific role.",
      role_label: "Role",
      role_placeholder: "Select a role to query",
      query_button: "Query Role Users",
      loading: "Loading...",
      loading_text: "Fetching users with selected role...",
      results_title: "Users with Role",
      user_count: "{count:number} {count|{1: user, *: users}}",
      role_selected: "Role: {role:string}",
      granted_at: "Granted: {date:string}",
      view_tx: "View TX",
      no_users: "No users found with this role",
      scrollable_hint: "Scroll to see more users",
      error_description: "Error fetching role users: {error:string}",
    },
    user_role_checker: {
      title: "Your Permissions",
      connect_wallet_message: "Connect wallet to see your roles",
      checking_roles: "Checking your roles...",
    },
    voting_power_timepoint: {
      title: "Voting Power at Timepoint",
      description: "Query historical voting power for any wallet at a specific timepoint",
      address_label: "Wallet Address",
      address_placeholder: "Enter wallet address (0x...)",
      timepoint_label: "Timepoint",
      timepoint_placeholder: "Enter timepoint",
      master_address_label: "Master Address (Optional)",
      master_address_placeholder: "Enter master address for validator power (0x...)",
      query_button: "Query Voting Power",
      querying: "Querying...",
      results_title: "Voting Power Results",
      node_power_label: "Node-based Power:",
      validator_power_label: "Validator Power:",
      total_power_label: "Total Power:",
      no_results: "No results to display",
      invalid_address: "Please enter a valid address",
      invalid_timepoint: "Please enter a valid timepoint/block number",
      address_required: "Wallet address is required",
      timepoint_required: "Timepoint is required",
      error_title: "Query Failed",
      error_description: "There was an error querying voting power: {error:string}",
      help_text:
        "Enter a wallet address and timepoint to view historical voting power. Optionally provide a master address to check validator-delegated power.",
    },
    unknown_error: "Unknown error",
    common_roles: {
      DEFAULT_ADMIN_ROLE: "Default Admin",
      EXECUTOR_ROLE: "Executor",
      SETTINGS_MANAGER_ROLE: "Settings Manager",
      NODE_WEIGHT_MANAGER_ROLE: "Node Weight Manager",
      UPGRADER_ROLE: "Upgrader",
      WHITELISTED_ROLE: "Whitelisted",
      WHITELIST_ADMIN_ROLE: "Whitelist Admin",
      PAUSER_ROLE: "Pauser",
      LEVEL_OPERATOR_ROLE: "Level Operator",
      MANAGER_ROLE: "Manager",
      WHITELISTER_ROLE: "Whitelister",
      grant_role: "Grant Role",
      revoke_role: "Revoke Role",
      granting: "Granting...",
      revoking: "Revoking...",
      grant_success_title: "Role Granted Successfully",
      grant_success_description: "The role has been granted to the user.",
      revoke_success_title: "Role Revoked Successfully",
      revoke_success_description: "The role has been revoked from the user.",
      error_title: "Role Operation Failed",
      error_description: "There was an error with the role operation: {error:string}",
      invalid_address: "Please enter a valid address",
      role_required: "Please select a role",
      address_required: "User address is required",
    },
  },
} satisfies BaseTranslation;

export default en;
