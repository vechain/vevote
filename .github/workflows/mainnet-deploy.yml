name: Mainnet ‚Äî Preview or Release
permissions:
  contents: read

on:
  workflow_dispatch:
    inputs:
      ref:
        description: 'Tag/branch/SHA to deploy (e.g. v1.2.3 or feature/foo)'
        required: true
        type: string
      target:
        description: 'Deploy as preview or production'
        required: true
        type: choice
        options: [preview, release]
        default: preview

jobs:
  deploy:
    runs-on: ubuntu-latest
    # REMOVE this if your secrets are at repo level, or ensure they exist in the "test" environment
    # environment: test
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}         # e.g. team_xxxxx
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }} # e.g. prj_xxxxx
      VERCEL_SCOPE: ${{ secrets.VERCEL_SCOPE }}           # team slug, e.g. my-team
    defaults:
      run:
        working-directory: apps   # same as your Vercel Root Directory

    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.ref }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Enable Corepack (pnpm/yarn if needed)
        run: corepack enable

      - name: Sanity checks
        run: |
          echo "PWD=$(pwd)"
          ls -la
          test -n "$VERCEL_TOKEN" || (echo "‚ùå Missing VERCEL_TOKEN" && exit 1)
          test -n "$VERCEL_PROJECT_ID" || (echo "‚ùå Missing VERCEL_PROJECT_ID" && exit 1)
          test -f package.json || (echo "‚ùå No package.json in $(pwd). Check working-directory vs Vercel Root Directory." && exit 1)

      # üîí Deterministic link to the exact project/org
      - name: Create .vercel/project.json
        run: |
          mkdir -p .vercel
          cat > .vercel/project.json <<EOF
          { "orgId": "${VERCEL_ORG_ID}", "projectId": "${VERCEL_PROJECT_ID}" }
          EOF
          echo "Linked to:"
          cat .vercel/project.json

      - name: Who am I?
        run: npx vercel whoami --token "$VERCEL_TOKEN" $([ -n "$VERCEL_SCOPE" ] && echo --scope "$VERCEL_SCOPE")

      - name: Vercel pull (preview)
        if: ${{ inputs.target == 'preview' }}
        run: npx vercel pull --yes --environment=preview --token "$VERCEL_TOKEN" $([ -n "$VERCEL_SCOPE" ] && echo --scope "$VERCEL_SCOPE")

      - name: Vercel pull (production)
        if: ${{ inputs.target == 'release' }}
        run: npx vercel pull --yes --environment=production --token "$VERCEL_TOKEN" $([ -n "$VERCEL_SCOPE" ] && echo --scope "$VERCEL_SCOPE")

      - name: Env pull (.env for PREVIEW)
        if: ${{ inputs.target == 'preview' }}
        run: npx vercel env pull .env --environment=preview --token "$VERCEL_TOKEN" $([ -n "$VERCEL_SCOPE" ] && echo --scope "$VERCEL_SCOPE")

      - name: Env pull (.env for PRODUCTION)
        if: ${{ inputs.target == 'release' }}
        run: npx vercel env pull .env --environment=production --token "$VERCEL_TOKEN" $([ -n "$VERCEL_SCOPE" ] && echo --scope "$VERCEL_SCOPE")

      - name: Build (preview)
        if: ${{ inputs.target == 'preview' }}
        run: npx vercel build --token "$VERCEL_TOKEN" $([ -n "$VERCEL_SCOPE" ] && echo --scope "$VERCEL_SCOPE")

      - name: Build (production)
        if: ${{ inputs.target == 'release' }}
        run: npx vercel build --prod --token "$VERCEL_TOKEN" $([ -n "$VERCEL_SCOPE" ] && echo --scope "$VERCEL_SCOPE")

      - name: Deploy PREVIEW
        if: ${{ inputs.target == 'preview' }}
        id: deploy_preview
        run: |
          URL=$(npx vercel deploy --prebuilt --yes --token "$VERCEL_TOKEN" $([ -n "$VERCEL_SCOPE" ] && echo --scope "$VERCEL_SCOPE"))
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "üîç Preview URL: $URL" | tee -a $GITHUB_STEP_SUMMARY

      - name: Deploy PRODUCTION
        if: ${{ inputs.target == 'release' }}
        run: npx vercel deploy --prebuilt --prod --yes --token "$VERCEL_TOKEN" $([ -n "$VERCEL_SCOPE" ] && echo --scope "$VERCEL_SCOPE")
