# .github/workflows/vercel-mainnet.yml
name: Mainnet ‚Äî Preview or Release

permissions:
  contents: read

on:
  workflow_dispatch:
    inputs:
      ref:
        description: 'Tag/branch/SHA to deploy (e.g. v1.2.3 or feature/foo)'
        required: true
        type: string
      target:
        description: 'Deploy as preview or production'
        required: true
        type: choice
        options: [preview, release]
        default: preview

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: test   # <- use your GitHub Environment that holds the secrets
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}   # the prod/mainnet project
      VERCEL_SCOPE: ${{ secrets.VERCEL_SCOPE }}             # optional team slug
    defaults:
      run:
        working-directory: apps   # matches your Vercel "Root Directory"

    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.ref }}

      - name: Setup Node (for Vercel CLI build)
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # Pull project settings to create .vercel/project.json (required by `vercel build`)
      - name: Vercel pull (preview)
        if: ${{ inputs.target == 'preview' }}
        run: |
          npx vercel pull --yes \
            --environment=preview \
            --project "$VERCEL_PROJECT_ID" \
            --token "$VERCEL_TOKEN" $([ -n "$VERCEL_SCOPE" ] && echo --scope "$VERCEL_SCOPE")

      - name: Vercel pull (production)
        if: ${{ inputs.target == 'release' }}
        run: |
          npx vercel pull --yes \
            --environment=production \
            --project "$VERCEL_PROJECT_ID" \
            --token "$VERCEL_TOKEN" $([ -n "$VERCEL_SCOPE" ] && echo --scope "$VERCEL_SCOPE")

      # Optional but recommended for Vite: fetch env vars into a local .env (VITE_* used at build)
      - name: Env pull (.env for PREVIEW)
        if: ${{ inputs.target == 'preview' }}
        run: npx vercel env pull .env --environment=preview --project "$VERCEL_PROJECT_ID" --token "$VERCEL_TOKEN" $([ -n "$VERCEL_SCOPE" ] && echo --scope "$VERCEL_SCOPE")

      - name: Env pull (.env for PRODUCTION)
        if: ${{ inputs.target == 'release' }}
        run: npx vercel env pull .env --environment=production --project "$VERCEL_PROJECT_ID" --token "$VERCEL_TOKEN" $([ -n "$VERCEL_SCOPE" ] && echo --scope "$VERCEL_SCOPE")

      # Build with your Vercel project settings (e.g., Vite + yarn build:mainnet; Output Directory configured)
      - name: Vercel build (preview)
        if: ${{ inputs.target == 'preview' }}
        run: npx vercel build --token "$VERCEL_TOKEN" $([ -n "$VERCEL_SCOPE" ] && echo --scope "$VERCEL_SCOPE")

      - name: Vercel build (production)
        if: ${{ inputs.target == 'release' }}
        run: npx vercel build --prod --token "$VERCEL_TOKEN" $([ -n "$VERCEL_SCOPE" ] && echo --scope "$VERCEL_SCOPE")

      # Deploy the prebuilt output
      - name: Deploy PREVIEW
        if: ${{ inputs.target == 'preview' }}
        id: deploy_preview
        run: |
          URL=$(npx vercel deploy --prebuilt --yes --token "$VERCEL_TOKEN" $([ -n "$VERCEL_SCOPE" ] && echo --scope "$VERCEL_SCOPE"))
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "üîç Preview URL: $URL" | tee -a $GITHUB_STEP_SUMMARY

      - name: Deploy PRODUCTION
        if: ${{ inputs.target == 'release' }}
        run: npx vercel deploy --prebuilt --prod --yes --token "$VERCEL_TOKEN" $([ -n "$VERCEL_SCOPE" ] && echo --scope "$VERCEL_SCOPE")
