name: Mainnet ‚Äî Preview or Release

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      ref:
        description: 'Tag/branch/SHA to deploy'
        required: true
        type: string
      target:
        description: 'Deploy as preview or release to production'
        required: true
        type: choice
        options: [preview, release]
        default: preview

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: test

    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Install dependencies
        run: npm i -g vercel@latest

      - name: Vercel pull (config + env)
        run: |
          ENVIRONMENT=${{ inputs.target == 'release' && 'production' || 'preview' }}
          vercel pull --yes --environment="$ENVIRONMENT" \
            --token "$VERCEL_TOKEN"

      - name: Build (debug)
        env:
          VERCEL_DEBUG: 1
        run: |
          PROD_FLAG="${{ inputs.target == 'release' && '--prod' || '' }}"
          vercel build $PROD_FLAG --token "$VERCEL_TOKEN"
      - name: Deploy
        id: deploy
        run: |
          PROD_FLAG="${{ inputs.target == 'release' && '--prod' || '' }}"
          URL=$(npx -y vercel@latest deploy --prebuilt $PROD_FLAG --yes \
            --token "$VERCEL_TOKEN")
          echo "url=$URL" >> "$GITHUB_OUTPUT"
          echo "üåê Deployed: $URL" | tee -a "$GITHUB_STEP_SUMMARY"

      - name: Create GitHub Release
        if: ${{ inputs.target == 'release' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEPLOY_URL: ${{ steps.deploy.outputs.url }}
        run: |
          set -euo pipefail
          REF="${{ inputs.ref }}"
          SHA=$(git rev-parse "$REF")

          if git rev-parse -q --verify "refs/tags/$REF" >/dev/null; then
            TAG="$REF"
          else
            echo "‚ö†Ô∏è Ref '$REF' is not a tag. Skipping GitHub Release. Create a tag to publish a release."
            exit 0
          fi

          gh release create "$TAG" --target "$SHA" \
            --title "Release $TAG" \
            --notes "Deployed to Vercel: ${DEPLOY_URL}"

