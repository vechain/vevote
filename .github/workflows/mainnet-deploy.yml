name: Mainnet ‚Äî Preview or Release
permissions:
  contents: read

on:
  workflow_dispatch:
    inputs:
      ref:
        description: 'Tag/branch/SHA to deploy (e.g. v1.2.3 or feature/foo)'
        required: true
        type: string
      target:
        description: 'Deploy as preview or production'
        required: true
        type: choice
        options: [preview, release]
        default: preview

jobs:
  deploy:
    runs-on: ubuntu-latest

    # optional: avoid overlapping runs
    concurrency:
      group: vercel-${{ inputs.target }}
      cancel-in-progress: true

    environment: test
    
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      VERCEL_SCOPE: ${{ secrets.VERCEL_SCOPE }}

    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.ref }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn

      - name: Enable Corepack
        run: corepack enable

      # Pulls project link + env from Vercel (no need to hand-write .vercel/project.json)
      - name: Vercel pull (config + env)
        run: |
          ENVIRONMENT=${{ inputs.target == 'release' && 'production' || 'preview' }}
          npx -y vercel pull --yes --environment="$ENVIRONMENT" --token "$VERCEL_TOKEN" $([ -n "$VERCEL_SCOPE" ] && echo --scope "$VERCEL_SCOPE")

      # Local build (prod flag only for releases)
      - name: Build
        run: |
          PROD_FLAG=$([ "${{ inputs.target }}" = "release" ] && echo "--prod")
          npx -y vercel build $PROD_FLAG --token "$VERCEL_TOKEN" $([ -n "$VERCEL_SCOPE" ] && echo --scope "$VERCEL_SCOPE")

      # Deploy prebuilt output
      - name: Deploy
        id: deploy
        run: |
          PROD_FLAG=$([ "${{ inputs.target }}" = "release" ] && echo "--prod")
          URL=$(npx vercel deploy --prebuilt $PROD_FLAG --yes --token "$VERCEL_TOKEN" $([ -n "$VERCEL_SCOPE" ] && echo --scope "$VERCEL_SCOPE"))
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "üåê Deployed: $URL" | tee -a $GITHUB_STEP_SUMMARY

      # Optional: expose the URL in the job summary + as an output for callers
